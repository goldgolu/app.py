name: Flask Auto Deploy & Test

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Debug - Check Files & Folders
        run: |
          echo "üìÇ Checking project structure..."
          ls -R

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          echo "Upgrading pip..."
          pip install --upgrade pip
          echo "Installing dependencies..."
          pip install -r paws_running/requirements.txt || pip install -r paws_running/requirements.txt --use-deprecated=legacy-resolver

      - name: Check for Missing Files
        run: |
          REQUIRED_FILES=("paws_running/app.py" "paws_running/requirements.txt" "paws_running/templates" "paws_running/static")
          MISSING_FILES=""

          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -e "$file" ] && [ ! -d "$file" ]; then
              MISSING_FILES+="$file\n"
            fi
          done

          if [ "$MISSING_FILES" != "" ]; then
            echo -e "‚ùå Error: Missing required files:\n$MISSING_FILES" >&2
            exit 1
          fi

      - name: Run Database Migrations (SQLite3)
        run: |
          python -c "from paws_running.app import db; db.create_all()" || echo "‚ö†Ô∏è Database migration failed"

      - name: Run Tests
        run: |
          pip install pytest
          mkdir -p paws_running/tests
          touch paws_running/tests/test_results.log
          pytest paws_running/tests/ | tee paws_running/tests/test_results.log || echo "Tests Failed" > paws_running/tests/test_results.log

      - name: Start Gunicorn Server for Debugging
        run: |
          echo "üöÄ Running Gunicorn for Flask app..."
          gunicorn -w 4 -b 0.0.0.0:8000 paws_running.app:app || echo "‚ö†Ô∏è Gunicorn Failed!"

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.SERVICE_ID }}
        run: |
          curl -X POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -d '{}'

      - name: Upload Logs if Failed
        if: failure()
        run: |
          echo "üö® Deployment or tests failed. Check logs."
          cat paws_running/tests/test_results.log || echo "‚ùå No test log found!"
